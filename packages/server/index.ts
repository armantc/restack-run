import { isDev } from "@restack-run/utils";
import fastify from "fastify";
import type { RouteOptions, RouteHandlerMethod, HTTPMethods } from "fastify";
import logger from "./logger";
import fastifyStaticCompressPlugin from "./fastify-static-compress-plugin";

function handleArguments(method: HTTPMethods, args: any[]): RouteOptions {
	let options: Partial<RouteOptions> = {};

	if (args.length === 1) options.handler = args[0];
	else {
		options = args[0];
		options.handler = args[1];
	}

	options.url = options.url || "";
	options.method = method;

	return options as RouteOptions;
}

type RouteShorthandOptions = Pick<
	RouteOptions,
	| "schema"
	| "attachValidation"
	| "exposeHeadRoute"
	| "bodyLimit"
	| "logLevel"
	| "version"
> & {
	url?: string;
	method?: string;
};

class Server {
	private list: string[] = [];

	private route(options: RouteShorthandOptions, handler: RouteHandlerMethod);
	private route(handler: RouteHandlerMethod);
	private route(...args) {
		logger.info("route added");
		//return handleArguments("GET", args);
	}

	get = this.route;
	head = this.route;
	post = this.route;
	put = this.route;
	patch = this.route;
	delete = this.route;

	register(routes, baseApiPath) {
		//path is base path
		//console.log("registered route folan");
		//this.list.push("registered route " + baseApiPath);
		logger.info(routes, baseApiPath);
	}

	async start(port: 8080, apiPrefix, publicPath) {
		const fastifyInstance = fastify({
			logger: logger,
		});

		if (!isDev())
			void fastifyInstance.register(fastifyStaticCompressPlugin, {
				root: publicPath,
				exclude: [apiPrefix], //routes that not contains static like api path must put
				spa: true,
			});

		try {
			const host = isDev() ? "localhost" : "0.0.0.0";

			await fastifyInstance.listen({
				port: port,
				host,
			});
		} catch (err) {
			logger.error(err);
			process.exit(1);
		}
	}
}

const server = new Server();

//omit to prevent intellisense show start and register, start and register only generated by restack core
export default server as Omit<Server, "start" | "register">;
